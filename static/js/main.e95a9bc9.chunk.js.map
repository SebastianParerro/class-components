{"version":3,"sources":["components/Contact.jsx","Contacts.jsx","reportWebVitals.js","index.js"],"names":["Contact","contact","useState","isOpen","toggle","phone","display","onClick","style","gender","firstName","lastName","initContacts","Contacts","contacts","setContacts","className","type","onChange","event","filteredContacts","filter","indexOf","target","value","console","log","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA2BeA,EAzBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,EAAyBC,oBAAS,GAAlC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAQ,CACbC,QAASH,EAAS,QAAU,QAS7B,OACC,sBAAKI,QAPN,WACCH,GACED,IAKF,UACC,sBAAKK,MAAOH,EAAZ,UACEJ,EAAQI,MADV,OAGA,sBAAKG,MAAOH,EAAZ,UACEJ,EAAQQ,OADV,OAGCR,EAAQS,UAPV,IAOsBT,EAAQU,SAP9B,QCXIC,EAAe,CAAC,CACpBF,UAAW,uCACXC,SAAU,2EACVN,MAAO,gBACPI,OAAQ,QACP,CACDC,UAAW,iCACXC,SAAU,+DACVN,MAAO,gBACPI,OAAQ,UACP,CACDC,UAAW,yDACXC,SAAU,mDACVN,MAAO,iBACN,CACDK,UAAW,iCACXC,SAAU,mDACVN,MAAO,gBACPI,OAAQ,UACP,CACDC,UAAW,uCACXC,SAAU,yDACVN,MAAO,gBACPI,OAAQ,QACP,CACDC,UAAW,uCACXC,SAAU,6CACVN,MAAO,gBACPI,OAAQ,SA4BKI,MAzBf,WACE,MAAgCX,mBAASU,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAYA,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,SAXC,SAACC,GACvB,IAAMC,EAAmBR,EAAaS,QAAO,SAACpB,GAC5C,OAA0D,IAAnDA,EAAQS,UAAUY,QAAQH,EAAMI,OAAOC,SAAmE,IAAlDvB,EAAQU,SAASW,QAAQH,EAAMI,OAAOC,UAGvGT,EAAYK,GACZK,QAAQC,IAAIP,EAAMI,OAAOC,UAMvB,qBAAKR,UAAU,WAAf,SACGF,EAASa,KAAI,SAAC1B,EAAS2B,GACtB,OAAO,cAAC,EAAD,CAAS3B,QAASA,GAAc2B,YCzClCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e95a9bc9.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst Contact = ({ contact }) => {\r\n\tconst [isOpen, toggle] = useState(false);\r\n\tconst phone = {\r\n\t\tdisplay: isOpen ? \"block\" : \"none\",\r\n\t};\r\n\r\n\tfunction selectHandler() {\r\n\t\ttoggle(\r\n\t\t\t!isOpen\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div onClick={selectHandler}>\r\n\t\t\t<div style={phone}>\r\n\t\t\t\t{contact.phone},\r\n\t\t\t</div>\r\n\t\t\t<div style={phone}>\r\n\t\t\t\t{contact.gender},\r\n\t\t\t</div>\r\n\t\t\t{contact.firstName} {contact.lastName},\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Contact;","import './Contacts.css';\nimport Contact from \"./components/Contact\";\nimport { useState } from 'react';\n\nconst initContacts = [{\n  firstName: \"Барней\",\n  lastName: \"Стинсовський\",\n  phone: \"+380956319521\",\n  gender: \"male\"\n}, {\n  firstName: \"Робін\",\n  lastName: \"Щербатська\",\n  phone: \"+380931460123\",\n  gender: \"female\"\n}, {\n  firstName: \"Анонімний\",\n  lastName: \"Анонімус\",\n  phone: \"+380666666666\"\n}, {\n  firstName: \"Лілія\",\n  lastName: \"Олдровна\",\n  phone: \"+380504691254\",\n  gender: \"female\"\n}, {\n  firstName: \"Маршен\",\n  lastName: \"Еріксонян\",\n  phone: \"+380739432123\",\n  gender: \"male\"\n}, {\n  firstName: \"Теодор\",\n  lastName: \"Мотсбес\",\n  phone: \"+380956319521\",\n  gender: \"male\"\n}];\n\nfunction Contacts() {\n  const [contacts, setContacts] = useState(initContacts);\n\n\n  const onChangeHandler = (event) => {\n    const filteredContacts = initContacts.filter((contact) => {\n      return contact.firstName.indexOf(event.target.value) !== -1 || contact.lastName.indexOf(event.target.value) !== -1;\n\n    });\n    setContacts(filteredContacts)\n    console.log(event.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <input type=\"text\" onChange={onChangeHandler} />\n      <div className=\"Contacts\">\n        {contacts.map((contact, index) => {\n          return <Contact contact={contact} key={index} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Contacts;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Contacts from './Contacts';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Contacts />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}